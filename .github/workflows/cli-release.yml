name: dotCLI Release
on:
  release:
    types: [ created ]
    
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        default: '1.0.0-SNAPSHOT'
        required: false
        
  # workflow_run:
  #   workflows: ["dotCLI Release trigger"]
  #   types:
  #     - completed



concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  JAVA_VERSION: 11
  JAVA_DISTRO: temurin
  GRAALVM_VERSION: '22.1.0'
  MVN_PACKAGE_TYPE: 'uber-jar'
  NPM_PACKAGE_SCOPE: '@dotcms'
  NPM_PACKAGE_NAME: 'dotcli'
  MVN_PACKAGE_NAME: 'dotcms-cli'
  NODE_VERSION: 19

jobs:
  precheck:
    if: ${{ github.event_name == 'release' || github.event_name == 'workflow_dispatch' }}
    name: 'Pre-check'
    runs-on: ubuntu-latest
    # outputs:
    #   RELEASE_VERSION: ${{ steps.version.outputs.RELEASE_VERSION }}
    #   HEAD: ${{ steps.version.outputs.HEAD }}
    #   AUXILIARY_BRANCH: ${{ steps.version.outputs.AUXILIARY_BRANCH }}
    #   DATE: ${{ steps.get-date.outputs.DATE }}    
    steps:
      - name: 'Log GitHub context'
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "::group::"
          echo "$GITHUB_CONTEXT"

          if [[ "$GITHUB_EVENT_NAME" == 'release' ]]; then
            TAG_NAME=${{ github.event.release.tag_name }}
            RELEASE_VERSION=${TAG_NAME:1}
          else
            RELEASE_VERSION=${{ inputs.version }}
          fi
          
          echo "::notice:: Event name: $GITHUB_EVENT_NAME"
          echo "::notice:: Release version: $RELEASE_VERSION"
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
          echo "::endgroup::"

      - name: 'Checkout'
        uses: actions/checkout@v4
        # with:
        #   token: ${{ secrets.CI_MACHINE_TOKEN }}

      - name: 'Setup Java'
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}
      - uses: ./.github/actions/cleanup-runner
      - name: 'Get Date'
        id: get-date
        run: |
          echo "DATE=$(/bin/date -u "+%Y-%m")" >> $GITHUB_OUTPUT
        shell: bash

      - name: 'Restore Maven Repository'
        id: cache-maven
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: maven-${{ steps.get-date.outputs.DATE }}-${{ github.run_id }}

      - name: 'Setup git config'
        run: |
          git config user.name dotCMS-Machine-Use
          git config user.email "dotCMS-Machine-User@dotcms.com"

      # Sets the release version and the next version
      # Creates an auxiliary branch for versioning updates
      - name: 'Set release version'
        id: version
        working-directory: ${{ github.workspace }}/tools/dotcms-cli
        run: |
          RELEASE_VERSION=$RELEASE_VERSION
          # RELEASE_VERSION=${{ github.event.inputs.version }}
          HEAD=${{ github.ref_name }}

          # Create a release branch for versioning updates
          AUXILIARY_BRANCH=version-update-${RELEASE_VERSION}-${{ github.run_id }}
          git checkout -b $AUXILIARY_BRANCH

          # Update version in pom.xml
          ./mvnw -B -ntp versions:set versions:commit -DnewVersion=$RELEASE_VERSION

          # Commit version changes
          git commit --allow-empty -a -m "Update dotCLI version to $RELEASE_VERSION"
          git push origin $AUXILIARY_BRANCH

          echo "RELEASE_VERSION=$RELEASE_VERSION" >> "$GITHUB_OUTPUT"
          echo "HEAD=$HEAD" >> "$GITHUB_OUTPUT"
          echo "AUXILIARY_BRANCH=$AUXILIARY_BRANCH" >> "$GITHUB_OUTPUT"


          
