name: Publish Starter
on:
  workflow_dispatch:
    inputs:
      type:
        description: 'Select a Starter type'
        required: true
        type: choice
        options:
          - 'Full Starter'
          - 'Empty Starter'

defaults:
  run:
    shell: bash

jobs:
  full-starter:
    runs-on: macos-13
    if: github.event.inputs.type == 'Full Starter' && github.repository == 'dotcms/core-workflow-test'
    environment: trunk
    steps:
      - name: Context
        run: |
          echo "Generationg a Full Starter..."
          echo "${{ toJSON(github.event.inputs) }}"

      - name: 'Get zip file'
        id: get-zip-file
        env:
          URL: ${{ secrets.DOT_STARTER_URL }}
          ACCESS_TOKEN: ${{ secrets.DOT_STARTER_ACCESS_TOKEN }}
        run: |
          echo "::group::Getting zip file"
          mkdir -p starter && cd starter
          curl -s -w "%{http_code}" --output $(date +'%Y%m%d').zip $URL \
            -H "Content-Type: application/json" \
            -H "Accept: application/octet-stream" \
            -H "Authorization: Bearer $ACCESS_TOKEN"
          ls -ltrh  
          echo "::endgroup::"

      - name: 'Upload artifacts'
        id: upload-artifacts
        uses: actions/upload-artifact@v4
        with:
          name: starter
          path: |
            ${{ github.workspace }}/starter/*.zip
          retention-days: 2
          if-no-files-found: ignore          
          
  empty-starter:
    runs-on: ubuntu-20.04
    if: github.event.inputs.type != 'Full Starter' && github.repository == 'dotcms/core-workflow-test'
    environment: trunk
    steps:
      - name: Context
        run: |
          echo 'Generating an Empty Starter...'
          
  deploy-artifact:
    needs: [ full-starter ]
    runs-on: ubuntu-20.04
    environment: trunk
    steps:
      - uses: jfrog/setup-jfrog-cli@v4
      - name: 'JFrog CLI context'
        env:
          ARTIFACTORY_URL: ${{ secrets.ARTIFACTORY_URL }}
          ARTIFACTORY_ACCESS_TOKEN: ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}
        run: |
          echo "::group::JFrog CLI context"
          jf rt ping --url=$ARTIFACTORY_URL --access-token=$ARTIFACTORY_ACCESS_TOKEN
          echo "::endgroup::"
          
      - name: 'Download artifacts'
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ github.token }}
          name: starter
          path: ${{ github.workspace }}/starter

      - name: 'Listing artifacts'
        run: ls -R
  
      - name: 'Deploy artifacts'
        env:
          ARTIFACTORY_ACCESS_TOKEN: ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}
          ARTIFACTORY_URL: ${{ secrets.ARTIFACTORY_URL }}
          ARTIFACTORY_REPO: dotcms-libs-snapshot-local
          GROUP_ID: com.dotcms
          ARTIFACT_ID: starter
          PACKAGING: zip
          FILE_PATH: ${{ github.workspace }}/starter
          DRY_RUN_MODE: true
        run: |
          echo "::group::Deploy Artifacts"
          if [[ $DRY_RUN_MODE == true ]]; then
            DRY_RUN='--dry-run'
          fi
          FILENAME=$(ls -ltr | awk 'END {print $NF}')
          VERSION="${FILENAME%.*}"
          echo "VERSION=${VERSION}"

          jfrog rt u \
            ${FILE_PATH}/${VERSION}.${PACKAGING} \
            ${ARTIFACTORY_REPO}/com/dotcms/${ARTIFACT_ID}/${VERSION}/${ARTIFACT_ID}-${VERSION}.${PACKAGING} \
            --url=$ARTIFACTORY_URL \
            --access-token=$ARTIFACTORY_ACCESS_TOKEN \
            --flat=false \
            --target-props="groupId=${GROUP_ID};artifactId=${ARTIFACT_ID};version=${VERSION};packaging=${PACKAGING}" \
            $DRY_RUN_MODE
            
          echo "::endgroup::"
