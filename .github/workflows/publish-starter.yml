name: Publish Starter
on:
  workflow_dispatch:
    inputs:
      type:
        description: 'Select a Starter type'
        required: true
        type: choice
        options:
          - 'Full Starter'
          - 'Empty Starter'
      dry-run:
        description: 'Enable dry-run mode'
        required: true
        type: boolean

defaults:
  run:
    shell: bash

jobs:
  get-full-starter:
    runs-on: macos-13
    if: github.event.inputs.type == 'Full Starter' && github.repository == 'dotcms/core-workflow-test'
    environment: trunk
    steps:
      - name: Context
        run: |
          echo "Generationg a Full Starter..."
          echo "${{ toJSON(github.event.inputs) }}"

      - name: 'Get zip file'
        id: get-zip-file
        env:
          URL: ${{ secrets.DOT_STARTER_URL }}
          ACCESS_TOKEN: ${{ secrets.DOT_STARTER_ACCESS_TOKEN }}
        run: |
          echo "::group::Getting zip file"
          mkdir -p starter && cd starter
          curl -s -w "%{http_code}" --output $(date +'%Y%m%d').zip $URL \
            -H "Content-Type: application/json" \
            -H "Accept: application/octet-stream" \
            -H "Authorization: Bearer $ACCESS_TOKEN"
          ls -ltrh  
          echo "::endgroup::"

      - name: 'Upload artifacts'
        id: upload-artifacts
        uses: actions/upload-artifact@v4
        with:
          name: starter
          path: |
            ${{ github.workspace }}/starter/*.zip
          retention-days: 2
          if-no-files-found: ignore          
          
  get-empty-starter:
    runs-on: ubuntu-20.04
    if: github.event.inputs.type != 'Full Starter' && github.repository == 'dotcms/core-workflow-test'
    environment: trunk
    steps:
      - name: Context
        run: |
          echo 'Generating an Empty Starter...'
          echo "${{ toJSON(github.event.inputs) }}"
          
      - uses: actions/checkout@v4

      - name: 'Starting dotCMS containers'
        working-directory: ${{ github.workspace }}/dotCMS/src/docker-compose/local-run
        run: |
          pwd
          ls -ltr
          # docker-compose -d up

      # - name: 'Set up ngrok'
      #   run: |
      #     curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
      #     echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
      #     sudo apt-get update && sudo apt-get install ngrok

      # - name: 'Start ngrok'
      #   id: start-ngrok
      #   run: |
      #     echo "::group::Start ngrok"
      #     ngrok http 8081 &
      #     sleep 5
      #     curl --silent --show-error http://localhost:4040/api/tunnels > tunnels.json
      #     cat tunnels.json
      #     NGROK_URL=$(jq -r .tunnels[0].public_url < tunnels.json)
      #     echo "ngrok URL: $NGROK_URL"
      #     echo "ngrok_url=$NGROK_URL" >> $GITHUB_OUTPUT
      #     echo "::endgroup::"
          
      # - name: 'Save ngrok URL'
      #   id: save-ngrok-url
      #   run: echo "ngrok_url=${{ steps.start-ngrok.outputs.ngrok_url }}" >> $GITHUB_ENV
        
      # - name: Print ngrok URL
      #   run: echo "Visit your application at ${{ env.ngrok_url }}"
        
      # - name: Wait for manual approval
      #   run: |
      #     echo "Manual approval needed. Visit your application at ${{ env.ngrok_url }}"       

  starter-approval-gate:
    needs: [ get-empty-starter ]
    environment: starter
    runs-on: ubuntu-20.04
    steps:
      - name: 'Starter approved'
        env: 
          ENV_NAME: starter
        run: echo "Approve for $ENV_NAME"
          
  # deploy-artifacts:
  #   needs: [ get-full-starter ]
  #   runs-on: ubuntu-20.04
  #   environment: trunk
  #   outputs:
  #     filename: ${{ steps.deploy-artifacts.outputs.filename }}
  #     url: ${{ steps.deploy-artifacts.outputs.url }}
  #   steps:
  #     - uses: jfrog/setup-jfrog-cli@v4
  #       env:
  #         JF_URL: ${{ vars.ARTIFACTORY_URL }}
  #         JF_ACCESS_TOKEN: ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}      
          
  #     - name: 'JFrog CLI context'
  #       run: |
  #         echo "::group::JFrog CLI context"
  #         jf rt ping
  #         echo "::endgroup::"
          
  #     - name: 'Download artifacts'
  #       uses: actions/download-artifact@v4
  #       with:
  #         github-token: ${{ github.token }}
  #         name: starter
  #         path: ${{ github.workspace }}/starter

  #     - name: 'Listing artifacts'
  #       run: ls -R
  
  #     - name: 'Deploy artifacts'
  #       id: deploy-artifacts
  #       working-directory: ${{ github.workspace }}/starter
  #       env:
  #         ARTIFACTORY_URL: ${{ vars.ARTIFACTORY_URL }}
  #         ARTIFACTORY_REPO: ${{ vars.ARTIFACTORY_REPO }}
  #         GROUP_ID: com.dotcms
  #         ARTIFACT_ID: starter
  #         PACKAGING: zip
  #         DRY_RUN_MODE: ${{ github.event.inputs.dry-run }}
  #       run: |
  #         echo "::group::Deploy Artifacts"
          
  #         if [[ $DRY_RUN_MODE == true ]]; then
  #           DRY_RUN='--dry-run'
  #         fi
          
  #         FILENAME=$(ls -ltr | awk 'END {print $NF}')
  #         VERSION="${FILENAME%.*}"
  #         SOURCE="./${FILENAME}"
  #         TARGET="${ARTIFACTORY_REPO}/com/dotcms/${ARTIFACT_ID}/${VERSION}/${ARTIFACT_ID}-${FILENAME}"
  #         PROPS="groupId=${GROUP_ID};artifactId=${ARTIFACT_ID};version=${VERSION};packaging=${PACKAGING}"
  #         URL="${ARTIFACTORY_URL}/artifactory/${TARGET}"
          
  #         echo "FILENAME=${FILENAME}"
  #         echo "VERSION=${VERSION}"
  #         echo "::notice::Uploading ${SOURCE} to ${TARGET} with props ${PROPS}"

  #         jfrog rt u "${SOURCE}" ${TARGET} \
  #           --target-props="${PROPS}" \
  #           --flat=false \
  #           $DRY_RUN

  #         echo "filename=${FILENAME}" >> $GITHUB_OUTPUT
  #         echo "url=${URL}" >> $GITHUB_OUTPUT  
  #         echo "::notice::Artifact URL ${URL}"
  #         echo "::endgroup::"

  # send-notification:
  #   if: ${{ github.event.inputs.dry-run == 'false' }}
  #   needs: [ deploy-artifacts ]
  #   runs-on: ubuntu-20.04
  #   environment: trunk
  #   steps:
  #     - name: Slack Notification
  #       uses: slackapi/slack-github-action@v1.26.0
  #       with:
  #         channel-id: "log-starter"
  #         payload: |
  #           {
  #             "blocks": [              
  #               {
  #                 "type": "section",
  #                 "text": {
  #                   "type": "mrkdwn",
  #                   "text": "> :large_green_circle: *Attention dotters:* a new Starter published!\n \n>This automated script is happy to announce that a new *_${{ github.event.inputs.type }}_* :package: `${{ needs.deploy-artifacts.outputs.filename }}` is now available on `ARTIFACTORY` :frog:!\n \n>```${{ needs.deploy-artifacts.outputs.url }}```"
  #                 }
  #               }
  #             ]
  #           }
  #       env:
  #         SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}    
