name: Reusable CI Build
on:
  workflow_call:
    inputs:
      is-full:
        required: false
        type: boolean
        default: false
      reuse-previous-build:
        required: false
        type: boolean
        default: false
    outputs:
      artifact-run-id: #todo
env:
  JVM_TEST_MAVEN_OPTS: "-e -B --no-transfer-progress -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn"
  DOCKER_PLATFORMS: "linux/amd64,linux/arm64"
  REGISTRY: ghcr.io
  DOCKER_IMAGE: dotcms/dotcms_test
  DOCKER_TAG: run-${{ github.run_id }}

jobs:
  check-previous-build:
    name: Check Previous Build
    runs-on: ubuntu-latest
    outputs:
      artifact-run-id: ${{ steps.check.outputs.run_id }}
      do-build: ${{ steps.check.outputs.do_build }}
    steps:
      - name: Download Build Artifact
        id: data-download
        uses: dawidd6/action-download-artifact@v2
        if: ${{ inputs.reuse-previous-build == true }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          #workflow: build-test-merge_group.yml
          commit: ${{ github.sha }}
          workflow_conclusion: success
          search_artifacts: true
          name: workflow-data
          path: .
          if_no_artifact_found: warn
      - name: Get SHAs and check if we should deploy
        id: check
        run: |
          build_artifact_exists=${{ steps.data-download.outputs.found_artifact }}
          if [[ ${build_artifact_exists} == "true" ]]; then
              run_id=`echo '${{ steps.data-download.outputs.artifacts }}' | jq -r '.[0].workflow_run.id'`
              echo "Merge Group Artifact Run id: $run_id"
          else
             echo "No Merge Group artifact found"
             run_id="${{ github.run_id }}"
            
          fi
          echo "run_id=$run_id" >> $GITHUB_OUTPUT
          echo "do_build=$do_build" >> $GITHUB_OUTPUT
  #
  # Detect Code that has changed and create outputs to uses as conditionals
  #
  changes:
    name: Check Changed Files
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      backend: ${{ steps.filter-rewrite.outputs.backend }}
      frontend: ${{ steps.filter-rewrite.outputs.frontend }}
      build: ${{ steps.filter-rewrite.outputs.build }}
      jvm_unit_test: ${{ steps.filter-rewrite.outputs.jvm_unit_test }}
      cli: ${{ steps.filter-rewrite.outputs.cli }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3.0.1
        id: filter
        with:
          filters: .github/filters.yaml
          list-files: 'escape'
      - name: Rewrite Filter
        id: filter-rewrite
        env:
          CICD_SKIP_TESTS: ${{ vars.CICD_SKIP_TESTS }}
        run: |
          # Default action outcomes based on paths-filter action outputs
          frontend=${{ steps.filter.outputs.frontend }}
          cli=${{ steps.filter.outputs.cli }}
          backend=${{ steps.filter.outputs.backend }}
          build=${{ steps.filter.outputs.build }}
          jvm_unit_test=${{ steps.filter.outputs.jvm_unit_test }}

          # Check if the commit is to the master branch
          skip_tests=${CICD_SKIP_TESTS:-false}  # Use environment variable, default to 'false'

          # Adjust outputs based on conditions
          if [ "${{ inputs.is-full }}" == "true" ]; then
            echo "Running build and all tests for merge group."
            build=true
            frontend=true
            cli=true
            backend=true
            jvm_unit_test=true
          fi
          # The below line ensures that if skip_tests is true, all tests are set to false.
          if [ "$skip_tests" == "true" ]; then
            echo "Skipping tests as per CICD_SKIP_TESTS flag."
            frontend=false
            cli=false
            backend=false
            jvm_unit_test=false
          fi

          # Export the outcomes as GitHub Actions outputs
          echo "frontend=${frontend}" >> $GITHUB_OUTPUT
          echo "cli=${cli}" >> $GITHUB_OUTPUT
          echo "backend=${backend}" >> $GITHUB_OUTPUT
          echo "build=${build}" >> $GITHUB_OUTPUT
          echo "jvm_unit_test=${jvm_unit_test}" >> $GITHUB_OUTPUT

  #
  # Initial JDK 11 Build
  # Basic build and install all with maven without running tests.
  # Provides local maven repo for subsequent steps
  #
  build-jdk11:
    name: "Initial JDK 11 Build"
    runs-on: ubuntu-20.04
    needs: changes
    if: ${{ needs.changes.outputs.build == 'true' }}
    env:
      DOCKER_BUILD_CONTEXT: /home/runner/work/_temp/core-build
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup master branch locally without switching current branch
        if: github.ref != 'refs/heads/master'
        run: git fetch origin master:master
      - uses: ./.github/actions/cleanup-runner
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Get Date
        id: get-date
        run: |
          echo "date=$(/bin/date -u "+%Y-%m")" >> $GITHUB_OUTPUT
        shell: bash
      - name: Cache Maven Repository
        id: cache-maven
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: mavencore-${{ steps.get-date.outputs.date }}-${{ github.run_id }}
          restore-keys: |
            mavencore-${{ steps.get-date.outputs.date }}
      - name: Cache Node Binary
        id: cache-node-binary
        uses: actions/cache@v4
        with:
          path: |
            installs
          key: node-binary-${{ hashFiles('core-web/.nvmrc') }}
      - name: Cache yarn
        id: cache-yarn
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/yarn
          # if specific cache does not exist then can base upon latest version
          key: yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: yarn-
      - name: Lint Checks
        shell: bash
        run: |
          ./mvnw $JVM_TEST_MAVEN_OPTS -Pvalidate --fail-at-end -Dgithub.event.name=${{ github.event_name }} --file pom.xml
      - name: Maven Build No Test
        shell: bash
        run: |
          echo "Creating $DOCKER_BUILD_CONTEXT"
          mkdir -p $DOCKER_BUILD_CONTEXT
          ./mvnw -Dprod=true $JVM_TEST_MAVEN_OPTS -Dcoreit.test.skip=true -Dpostman.test.skip=true -Ddocker.buildArchiveOnly=$DOCKER_BUILD_CONTEXT -Ddotcms.image.name=${DOCKER_IMAGE}:${DOCKER_TAG} --show-version -DskipTests=true -DskipITs=true clean install --file pom.xml
      - name: Persist Maven Repo
        uses: actions/upload-artifact@v4
        with:
          name: maven-repo
          path: ~/.m2/repository
      - name: Delete Local Artifacts From Cache
        shell: bash
        run: find ~/.m2 -name \*-SNAPSHOT -type d -exec rm -rf {} +
      - name: Persist Docker Build Context
        uses: actions/upload-artifact@v4
        with:
          name: docker-build-context
          path: ${{ env.DOCKER_BUILD_CONTEXT }}/docker-build.tar
      - name: Save Docker image to a tar file
        run: docker save ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} > image.tar

      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar

  #
  # Run all JVM Unit Tests in parallel with other tests
  #
  linux-jvm-tests:
    name: JVM Unit Tests - JDK ${{matrix.java.name}}
    runs-on: ubuntu-20.04
    if: ${{ needs.changes.outputs.jvm_unit_test == 'true' }}
    needs: [changes,build-jdk11]
    timeout-minutes: 240
    env:
      MAVEN_OPTS: -Xmx2048m
    strategy:
      fail-fast: false
      matrix:
        java: [ { name: "11", java-version: 11, distribution: 'temurin', maven_args: "" } ]
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java.name }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java.java-version }}
          distribution: ${{ matrix.java.distribution }}
      - name: Get Date
        id: get-date
        run: |
          echo "date=$(/bin/date -u "+%Y-%m")" >> $GITHUB_OUTPUT
        shell: bash
      - name: Download Maven Repo
        uses: actions/download-artifact@v4
        with:
          name: maven-repo
          path: ~/.m2/repository
      - name: Build
        # exclude core web we aare testing that separately
        run: eval ./mvnw -Pcoverage -Dprod $JVM_TEST_MAVEN_OPTS test -pl \!:dotcms-core-web ${{ matrix.java.maven_args}}
      - name: Prepare reports archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
      - name: Upload reports Archive (if maven failed)
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-reports-linux-jvm${{matrix.java.name}}
          path: 'test-reports.tgz'
      - name: core-maven-unit-tests
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: "build-reports-test-JVM Tests - JDK ${{matrix.java.name}}"
          path: |
            dotCMS/target/*-reports/TEST-*.xml
            dotCMS/target/jacoco-report/*.exec
            target/build-report.json
            LICENSE
          retention-days: 2

  linux-cli-tests:
    name: CLI Tests - JDK ${{matrix.java.name}}
    runs-on: ubuntu-20.04
    if: ${{ needs.changes.outputs.cli == 'true' || needs.changes.outputs.backend == 'true' }}
    needs: [ changes, build-jdk11 ]
    timeout-minutes: 240
    env:
      MAVEN_OPTS: -Xmx2048m
    strategy:
      fail-fast: true
      matrix:
        java: [ { name: "11", java-version: 11, distribution: 'temurin', maven_args: "" } ]
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java.name }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java.java-version }}
          distribution: ${{ matrix.java.distribution }}
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp/docker-image
      - name: Load Docker image from tar file
        run: docker load < /tmp/docker-image/image.tar
      - name: Get Date
        id: get-date
        run: |
          echo "date=$(/bin/date -u "+%Y-%m")" >> $GITHUB_OUTPUT
        shell: bash
      - name: Download Maven Repo
        uses: actions/download-artifact@v4
        with:
          name: maven-repo
          path: ~/.m2/repository
      - id: prepare-license
        name: Prepare license
        env:
          DOTCMS_LICENSE_KEY: ${{ secrets.DOTCMS_LICENSE }}
        run: |
          DOTCMS_LICENSE_PATH=~/.dotcms/license
          mkdir -p ${DOTCMS_LICENSE_PATH}
          echo "${DOTCMS_LICENSE_KEY}" > ${DOTCMS_LICENSE_PATH}/license.dat
          echo "DOTCMS_LICENSE_FILE=${DOTCMS_LICENSE_PATH}/license.dat" >> "$GITHUB_ENV"
      - name: Build
        run: eval ./mvnw -Dprod $JVM_TEST_MAVEN_OPTS -Dtestcontainers.docker.image=${DOCKER_IMAGE}:${DOCKER_TAG} -pl :dotcms-api-data-model,:dotcms-cli verify ${{ matrix.java.maven_args}}
      - name: Prepare reports archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
      - name: Upload reports Archive (if maven failed)
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-reports-cli-jvm${{matrix.java.name}}
          path: 'test-reports.tgz'
      - name: cli-tests
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: "build-reports-test-cli - JDK ${{matrix.java.name}}"
          path: |
            tools/dotcms-cli/**/target/failsafe-reports/*.xml
            tools/dotcms-cli/**/target/jacoco-report/*.exec
            target/build-report.json
            LICENSE
          retention-days: 2

  #
  # Run Frontend Tests
  #
  linux-frontend-tests:
    name: Frontend Unit Tests
    runs-on: ubuntu-20.04
    if: ${{ needs.changes.outputs.frontend == 'true' }}
    needs: [changes,build-jdk11]
    timeout-minutes: 240
    env:
      MAVEN_OPTS: -Xmx2048m
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: 'temurin'
      - name: Get Date
        id: get-date
        run: |
          echo "date=$(/bin/date -u "+%Y-%m")" >> $GITHUB_OUTPUT
        shell: bash
      - name: Download Maven Repo
        uses: actions/download-artifact@v4
        with:
          name: maven-repo
          path: ~/.m2/repository
        continue-on-error: true
      - name: Restore Node Binary
        id: cache-node-binary
        uses: actions/cache/restore@v4
        with:
          path: |
            installs
          key: node-binary-${{ hashFiles('core-web/.nvmrc') }}
      - name: Cache yarn
        id: cache-yarn
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/yarn
          # if specific cache does not exist then can base upon latest version
          key: yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: yarn-
      - name: Build # expect node cache to exist from
        shell: bash
        run: eval ./mvnw -Dprod $JVM_TEST_MAVEN_OPTS -pl :dotcms-core-web test
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name 'surefire-reports' -type d | tar -czf test-reports.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-reports-frontend
          path: 'test-reports.tgz'
      - name: frontend-unit-tests
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: "build-reports-test-Frontend unit tests"
          path: |
            core-web/target/*-reports/**/TEST-*.xml
            target/build-report.json
            LICENSE
          retention-days: 2
  #
  # Run Legacy Integration test suite batches
  #
  linux-integration-tests:
    name: JVM IT Tests - JDK ${{matrix.java.name}} ${{matrix.suites.name}}
    runs-on: ubuntu-20.04
    # Skip master in forks
    if: ${{ needs.changes.outputs.backend == 'true' }}
    needs: [build-jdk11,changes]
    timeout-minutes: 240
    env:
      MAVEN_OPTS: -Xmx2048m
    strategy:
      fail-fast: false
      matrix:
        java: [ { name: "11", java-version: 11, distribution: 'temurin', maven_args: "" } ]
        suites:
          - { name: "MainSuite 1a", pathName: "mainsuite1a", maven_args: '-Dit.test=MainSuite1a -Dit.test.forkcount=1' }
          - { name: "MainSuite 1b", pathName: "mainsuite1b", maven_args: '-Dit.test=MainSuite1b -Dit.test.forkcount=1' }
          - { name: "MainSuite 2a", pathName: "mainsuite2a", maven_args: '-Dit.test=MainSuite2a -Dit.test.forkcount=1' }
          - { name: "MainSuite 2b", pathName: "mainsuite2b", maven_args: '-Dit.test=MainSuite2b -Dit.test.forkcount=1' }
    steps:
      - uses: actions/checkout@v4
      - name: Set up IT Tests ${{ matrix.java.name }} ${{ matrix.suites.name }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java.java-version }}
          distribution: ${{ matrix.java.distribution }}
      #- name: Download Maven Repo
      #  uses: actions/download-artifact@v4
      #  with:
      #    name: maven-repo
      #    path: .
      #- name: Extract Maven Repo
      #  shell: bash
      #  run: tar -xzf maven-repo.tgz -C ~
      - name: Get Date
        id: get-date
        run: |
          echo "date=$(/bin/date -u "+%Y-%m")" >> $GITHUB_OUTPUT
        shell: bash
      - name: Download Maven Repo
        uses: actions/download-artifact@v4
        with:
          name: maven-repo
          path: ~/.m2/repository
      - name: Build
        env:
          DOT_DOTCMS_LICENSE: ${{ secrets.DOTCMS_LICENSE }}
        run: eval ./mvnw -Pcoverage -Dprod $JVM_TEST_MAVEN_OPTS verify -pl :dotcms-integration -Dcoreit.test.skip=false ${{ matrix.suites.maven_args}} ${{ matrix.java.maven_args}}
      - name: Prepare reports archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-reports-linux-jvm${{matrix.java.name}}-${{matrix.suites.pathName}}
          path: 'test-reports.tgz'
      - name: failsafe-it-tests  # Uploads will be merged with same name
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: "build-reports-test-IT Tests - JDK ${{matrix.java.name}} - ${{matrix.suites.name}}"
          path: |
            dotcms-integration/target/failsafe-reports/*.xml
            dotcms-integration/target/jacoco-report/*.exec
            target/build-report.json
            LICENSE
          retention-days: 2

  linux-postman-tests:
    name: Run Postman Tests - ${{matrix.collection_group}}
    runs-on: ubuntu-latest
    needs: [build-jdk11, changes]
    if: ${{ needs.changes.outputs.backend == 'true' }}
    strategy:
      fail-fast: false
      matrix:
        collection_group: [ 'category-content', 'container', 'experiment', 'graphql', 'page', 'pp', 'template', 'workflow',  'default' ]
    steps:
      - uses: actions/checkout@v4
      - id: fetch-core
        name: Fetch Core Repo
        uses: actions/checkout@v4
      - name: Download Maven Repo
        uses: actions/download-artifact@v4
        with:
          name: maven-repo
          path: ~/.m2/repository
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp/docker-image
      - name: Load Docker image from tar file
        run: docker load < /tmp/docker-image/image.tar

      - name: Cache Node Binary
        id: cache-node-binary
        uses: actions/cache@v4
        with:
          path: |
            installs
          key: node-binary-${{ hashFiles('core-web/.nvmrc') }}
      - name: Cache yarn
        id: cache-yarn
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/yarn
          # if specific cache does not exist then can base upon latest version
          key: yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: yarn-
      - name: Prepare license
        run: |
          mkdir -p ~/.dotcms/license/
          touch ~/.dotcms/license/license.dat
          echo "${{ secrets.DOTCMS_LICENSE }}" > ~/.dotcms/license/license.dat
      - id: run-postman-tests
        name: Run Postman Tests
        timeout-minutes: 90
        run: |
          ./mvnw -Pcoverage $JVM_TEST_MAVEN_OPTS verify \
            -pl :dotcms-postman -Dpostman.test.skip=false \
            -Dpostman.collections=${{ matrix.collection_group }} \
            -Ddotcms.image.name=${DOCKER_IMAGE}:${DOCKER_TAG}
          pec=$?
          [[ pec -eq 0 ]] || exit pec
      - name: Prepare reports archive (if maven failed)
        if: failure()
        shell: bash
        run: |
          find . -name '*-reports' -type d
          tree ./dotcms-postman
          find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-reports-postman-${{ matrix.collection_group }}
          path: 'test-reports.tgz'
      - name: failsafe-postman-tests  # Uploads will be merged with same name
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: "build-reports-test-postman - ${{ matrix.collection_group }}"
          path: |
            dotcms-postman/target/failsafe-reports/*.xml
            dotcms-postman/target/jacoco-report/*.exec
            target/build-report.json
            LICENSE
          retention-days: 2

  #
  # Run CLI build artifacts
  #
  build-cli:
    name: CLI Build
    needs: [build-jdk11,linux-jvm-tests,linux-integration-tests,linux-postman-tests]
    uses: ./.github/workflows/cli-build-artifacts.yml
    with:
      buildNativeImage: true
      branch: ${{ github.ref }}

  # Make sure subsequent steps run after all tests are complete and allow for failures
  tests-complete:
    name: Tests Complete
    runs-on: ubuntu-20.04
    needs: [ build-jdk11,linux-jvm-tests,linux-integration-tests,linux-frontend-tests,linux-cli-tests,linux-postman-tests,build-cli ]
    if: ( always() && !cancelled() }} )
    steps:
      - name: Tests Complete
        run: |
          echo "Tests complete"

  sonarqube:
    name: SonarQube Scan
    uses: ./.github/workflows/reusable-sonarqube.yml
    needs: [ changes, tests-complete ]
    if: |
      ( always() && !cancelled() }} &&
      (github.repository == 'dotCMS/core') &&
      ${{ needs.changes.outputs.build == 'true' }} &&
      (github.ref == 'refs/heads/master' || github.event_name == 'pull_request')
    with:
      run-id: ${{ env.ARTIFACT_RUN_ID }}

  #
  # Collate reports and build status
  #
  prepare-report-data:
    name: Prepare Report Data
    needs: [ tests-complete ]
    uses: ./.github/workflows/reusable-finalize.yml
    if: always()
