name: 'Setup Java'
description: 'Setup Java using SDKMan including optionally setting up GraalVM for native images'
inputs:
  java-version:
    description: 'Override the java version to install'
    required: false
  require-graalvm:
    description: 'Require GraalVM to be installed'
    required: true
    default: 'false'
  graalvm-version:
    description: 'Override the sdkman version of GraalVM to install'
    required: false
runs:
  using: 'composite'
  steps:
    - name: 'Setup SDKMan'
      id: sdkman-java
      shell: bash
      run: |
        DEFAULT_GRAALVM=21.0.2-graalce
        
        if command -v sdk &> /dev/null; then
          echo "SDKMAN is installed and initialized"
        else
          echo "Using sdkman to install SDKMAN"
          curl -s "https://get.sdkman.io" | bash
          source "$HOME/.sdkman/bin/sdkman-init.sh"
        fi

        REQUESTED_VERSION=${{ inputs.java-version }}
        REQUIRE_GRAALVM=${{ inputs.require-graalvm }}
        GRAALVM_VERSION=${{ inputs.graalvm-version }}

        # Handle default values for REQUESTED_VERSION and GRAALVM_VERSION
        if [ -z "$REQUESTED_VERSION" ]; then
          if [ -f .sdkmanrc ]; then
            REQUESTED_VERSION=$(grep -oP '(?<=^java=).+' .sdkmanrc)
            echo "Extracted Java version from .sdkmanrc: $REQUESTED_VERSION"
          else
            echo "No Java version provided and .sdkmanrc file not found."
            exit 1
          fi
        else
          echo "Using provided Java version: $REQUESTED_VERSION"
        fi

        if [ -z "$GRAALVM_VERSION" ]; then
          GRAALVM_VERSION=${DEFAULT_GRAALVM}
          echo "No GraalVM version provided, using default: $GRAALVM_VERSION"
        else
          echo "Using provided GraalVM version: $GRAALVM_VERSION"
        fi

        TEST_HOME=$(sdk home java "$REQUESTED_VERSION" 2>/dev/null) || true
        if [ -z "$TEST_HOME" ]; then
          echo "Java version $REQUESTED_VERSION is not installed. Installing now..."
          sdk install java "$REQUESTED_VERSION"
          sdk use java "$REQUESTED_VERSION"
          TEST_HOME=$(sdk home java "$REQUESTED_VERSION")
        else
          echo "Java version $REQUESTED_VERSION is already installed."
          sdk use java "$REQUESTED_VERSION"
        fi

        CURRENT_JAVA_HOME=$(readlink -f "$HOME/.sdkman/candidates/java/current")
        if [ "$CURRENT_JAVA_HOME" != "$TEST_HOME" ]; then
          echo "Updating default Java version to $REQUESTED_VERSION"
          sdk default java "$REQUESTED_VERSION"
        else
          echo "Default Java version is already set to $REQUESTED_VERSION"
        fi

        # Ensure JAVA_HOME and path update persist in subsequent steps
        echo "JAVA_HOME=$TEST_HOME" >> $GITHUB_ENV
        JAVA_BIN_PATH="$HOME/.sdkman/candidates/java/current/bin"
        if [[ ":$PATH:" != *":$JAVA_BIN_PATH:"* ]]; then
          echo "$JAVA_BIN_PATH" >> $GITHUB_PATH
        fi

        # Set GRAALVM_HOME if the version ends with "-graalce", "-mandrel", or "-graal"
        if [[ "$REQUESTED_VERSION" == *"-graalce" || "$REQUESTED_VERSION" == *"-mandrel" || "$REQUESTED_VERSION" == *"-graal" ]]; then
          echo "GRAALVM_HOME=$TEST_HOME" >> $GITHUB_ENV
        fi

        # Install and set GRAALVM_HOME if required and not already set
        if [[ "$REQUIRE_GRAALVM" == "true" && -z "$GRAALVM_HOME" && "$REQUESTED_VERSION" != "$GRAALVM_VERSION" ]]; then
          echo "Requested version does not match required GraalVM version and GRAALVM_HOME is not set. Installing GraalVM version $GRAALVM_VERSION..."
          sdk install java "$GRAALVM_VERSION"
          GRAALVM_HOME=$(sdk home java "$GRAALVM_VERSION")
          echo "GRAALVM_HOME=$GRAALVM_HOME" >> $GITHUB_ENV
          echo "GRAALVM_HOME installed and set to $GRAALVM_HOME"
        else
          echo "GRAALVM_HOME is already set to $GRAALVM_HOME, skipping installation of GraalVM."
        fi

        # Echo JAVA_HOME, Java version, and path to Java command
        echo "JAVA_HOME is set to: $JAVA_HOME"
        echo "Path to java command: $(which java)"
        echo "Java version:"
        java -version